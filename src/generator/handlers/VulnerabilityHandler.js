'use strict';

const P = require('bluebird');
const RemediationPlay = require('../RemediationPlay');
const vmaas = require('../../external/vmaas');
const vulnerabilities = require('../../external/vulnerabilities');
const disambiguator = require('../disambiguator');
const TEMPLATE = require('../templates/static').vulnerabilities.errata;
const contentServerResolver = require('../templates/resolvers/ContentServerResolver');

const VMAAS_PATTERN = /^RH[SBE]A-20[\d]{2}:[\d]{4,5}$/;

exports.application = 'vulnerabilities';

exports.createPlay = function (issue) {
    if (VMAAS_PATTERN.test(issue.id.issue)) {
        return handleErratumBased(issue);
    }

    return handleRuleBasedIssue(issue);
};

async function handleErratumBased ({id, hosts}) {
    const erratum = (await vmaas.getErratum(id.issue))[id.issue];

    if (!erratum) {
        return;
    }

    const description = `${erratum.synopsis} (${id.issue})`;
    return new RemediationPlay(id, TEMPLATE.apply({ERRATA: id.issue}), hosts, description);
}

async function handleRuleBasedIssue ({id, hosts, resolution}) {
    const [templates, rule] = await P.all([
        contentServerResolver.resolveTemplates(id),
        vulnerabilities.getRule(id.issue)
    ]);

    if (!templates.length || !rule) {
        return;
    }

    const template = disambiguator.disambiguate(templates, resolution, id);
    return new RemediationPlay(id, template, hosts, rule.description);
}
