#!/usr/bin/env groovy

@Library("github.com/RedHatInsights/insights-pipeline-lib")

NS = 'remediations-ci'
TESTNS = 'remediations-pr'

def notify(subject, body, color) {
    message = subject
    if (body != null) {
        message += " | ${body}"
    }

    slackSend message: message, color: color, channel: '#remediations'
}

def notifyOnFailure(Closure step) {
    try {
        step()
    } catch (e) {
        notify("@jharting [${env.JOB_NAME.split('/')[-1]}] Build failed", "See ${env.BUILD_URL}console", "danger")
        throw e
    }
}

def scale (count) {
    sh "oc scale --replicas=${count} --namespace=${TESTNS} dc/postgres"
    sh "oc scale --replicas=${count} --namespace=${TESTNS} dc/playbooks-ssg"

    // wait for dependencies
    waitFor(count, 'postgres')
    waitFor(count, 'playbooks-ssg')
}

def waitFor (count, resource) {
    println "waiting for ${resource} to scale to ${count}"

    openshift.withProject(TESTNS) {
        timeout(2) {
            def latestDeploymentVersion = openshift.selector('dc', resource).object().status.latestVersion
            def rc = openshift.selector('rc', "${resource}-${latestDeploymentVersion}")
            rc.untilEach(1) {
                def rcMap = it.object()
                def ready = rcMap.status.readyReplicas == null ? 0 : rcMap.status.readyReplicas
                return (rcMap.status.replicas.equals(ready))
            }
        }
    }
}

node {
    notifyOnFailure {
        notify("[${env.JOB_NAME.split('/')[-1]}] Build started", null, "#439FE0")

        env.NODEJS_HOME = "${tool 'node-10'}"
        env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"

        checkout scm

        sh 'git rev-parse HEAD'

        stage('build') {
            sh 'npm ci'
        }

        stage('cross-check ssg template validator') {
            sh "node src/validateTemplate.js src/connectors/ssg/mock/standard/*"
        }

        openshift.withCluster() {

            stage('verify') {
                env.DB_HOST="postgres.${TESTNS}.svc"
                env.DB_DATABASE='remediationstest'
                env.SSG_IMPL='impl'
                env.SSG_HOST="http://playbooks-ssg.${TESTNS}.svc:8080"

                lock(TESTNS) {
                    scale(1)
                    sh "oc get pods --namespace ${TESTNS}"

                    try {
                        sh 'npm run verify'
                        sh 'npm run db:migrate'
                        sh 'npm run db:migrate:undo:all'
                    } finally {
                        scale(0)
                        sh "oc get pods --namespace ${TESTNS}"
                    }
                }
            }

            stage('build image') {
                timeout (10) {
                    openshift.withProject('buildfactory') {
                        def build = openshift.selector('bc', 'remediations').startBuild()
                        build.logs('-f')
                    }
                }
            }

            stage('deploy') {
                timeout (2) {
                    openshift.withProject(NS) {
                        def dc = openshift.selector('dc', 'remediations')
                        dc.rollout().latest()
                        dc.rollout().status() // wait for rollout to reach desired replica count
                    }
                }
            }
        }

        stage('push image to stage') {
            openShift.withNode(defaults: true) {
                promoteImages(
                    srcImages: [
                        "remediations:latest"
                    ],
                    dstProject: "remediations-stage",
                    dstSaUsername: "image-sync",
                    dstSaTokenCredentialsId: "remediations-image-sync"
                )
            }

            notify("[${env.JOB_NAME.split('/')[-1]}] Build finished", null, "good")
        }
    }
}
