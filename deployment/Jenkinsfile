#!/usr/bin/env groovy

NS = 'remediations-ci'
TESTNS = 'remediations-pr'

def notify(subject, body, color) {
    message = subject
    if (body != null) {
        message += " | ${body}"
    }

    slackSend message: message, color: color, channel: '#insights-remediations'
}

def notifyOnFailure(Closure step) {
    try {
        step()
    } catch (e) {
        notify("@jharting [${env.JOB_NAME}] Build failed", "See ${env.BUILD_URL}console", "danger")
        throw e
    }
}

def scale (count) {
    sh "oc scale --replicas=${count} --namespace=${TESTNS} dc/postgres"

    // wait for dependencies
    waitFor(count, 'postgres')
}

def waitFor (count, resource) {
    println "waiting for ${resource} to scale to ${count}"

    openshift.withCluster() {
        openshift.withProject(TESTNS) {
            timeout(2) {
                def latestDeploymentVersion = openshift.selector('dc', resource).object().status.latestVersion
                def rc = openshift.selector('rc', "${resource}-${latestDeploymentVersion}")
                rc.untilEach(1) {
                    def rcMap = it.object()
                    def ready = rcMap.status.readyReplicas == null ? 0 : rcMap.status.readyReplicas
                    return (rcMap.status.replicas.equals(ready))
                }
            }
        }
    }
}

node {
    notifyOnFailure {
        notify("[${env.JOB_NAME}] Build started", null, "#439FE0")

        env.NODEJS_HOME = "${tool 'node-10'}"
        env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"

        checkout scm

        sh 'git rev-parse HEAD'

        stage('build') {
            sh 'npm ci'
        }

        stage('verify') {
            env.DB_HOST="postgres.${TESTNS}.svc"
            env.DB_DATABASE='remediationstest'

            lock(TESTNS) {
                scale(1)
                sh "oc get pods --namespace ${TESTNS}"

                try {
                    sh 'npm run verify'
                    sh 'npm run db:migrate'
                    sh 'npm run db:migrate:undo:all'
                } finally {
                    scale(0)
                    sh "oc get pods --namespace ${TESTNS}"
                }
            }
        }

        stage('build image') {
            openshiftBuild(buildConfig: "remediations", showBuildLogs: "true", namespace: NS)
        }

        stage('deploy') {
            openshiftDeploy(deploymentConfig: "remediations", namespace: NS)
            sh "oc rollout status --namespace=${NS} dc/remediations"
            notify("[${env.JOB_NAME}] Deployment finished", null, "good")
        }
    }
}
